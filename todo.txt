- Compiler generates a lot of stack variables for `case` matchers, which can lead to C's stack overflow with TCC, that is unable to optimize stack allocations.
  compiling core_...
  fatal: stack overflow
  at ip=00000000215CC700 sp=0000000020B48860
  Stack Trace:
    000000002152EF01:ssa_form:423,14,C:/Users/nikita/Documents/git/symta/build/new/src/compiler.s
    000000002152CBB1:ssa_expr:478,13,C:/Users/nikita/Documents/git/symta/build/new/src/compiler.s
    00000000215BA299:ev:86,5,C:/Users/nikita/Documents/git/symta/build/new/src/compiler.s
    00000000215984E3:ssa_set:234,22,C:/Users/nikita/Documents/git/symta/build/new/src/compiler.s
    000000002152EF01:ssa_form:423,14,C:/Users/nikita/Documents/git/symta/build/new/src/compiler.s
    000000002152CBB1:ssa_expr:478,13,C:/Users/nikita/Documents/git/symta/build/new/src/compiler.s
    000000002159462E:ssa_progn:240,15,C:/Users/nikita/Documents/git/symta/build/new/src/compiler.s
- in @As methods, _this_method gets clobbered by a call to As.tail, during destructuring of "Me @As":
  yet expand_block_item_method works, as it avoids clobbering in a special case for "when Name >< _"
  int.test @As = say: _method_name: _this_method
  123.test
  look for add_pattern_matcher, which should probably use 
- list.apply and list.apply_method should really be runtime calls, followed by MCALL. That may open ways to speedup them. Replace list.apply_method with _redirect, which will simply redirect method call to other object. Check out expand_block_item_method
- ensure type_method_t->fn gets properly lifted, before get_method's result is cached.
- SUBTYPE and SET_TYPE_PARAMS should be tables, passed to init tables.
- fix OOP so that `type child.parent` would include parent's fields and call parent's constructor.
  Child's constructor should somehow get parent's type size and parent's constructor, which would require compiler dumping typeinfo and runtime collecting type constructors.
- "$method = Body" declarations which would attach to the last type defined in current file.
- change void* and uintptr_t to uint64_t, typedef'ed as u64
- `get_` and `set_` methods, based on cached `methods_` list
- optimize build dependencies being recompiled when not required.
  ensure to check export list. Alayws recompile for macro deps, but dont for unchanged function export list or classes

- reuse `!` for list splicing python style
- methods `list.e` and `hard_list.e` don't appear to be used that much, rename the to each
- optimize and fix ssa_form, so that will report wrong number of arguments
- optimize No, by initing it to a well known memory location
- only symbols referenced inside of a closure should be allocated on heap.
- inline C-code
- inline optimizations for arithmetic and comparions operators, array size and array indexing
- a way to reference some memory location
- lexical targets for for optimizations in Spell of Mastery
  1670: =
  1291: `:`
  1268: <=
  724: when
  470: -
  413: Me
  420: +
  354: type.method ... = ... (around 2 kilobytes)
  324: arg/Value ([^a-zA-Z.][a-z][A-Za-z]*/)
  299: if/then/else
  256: less
  237: and (can be replaced with && or `et`)
  167: .0 and .head
  162: ?
  123: got
  116: not
  96: `else if` (replace with elif)
  89: size
  83: or (can be replaced with -- or `an`)
  54: f{Arg} ({[A-Ba-b0-9]\+}')
  54: push
  53: ^
  41: &
  40: !.*+1
  32: type.`!method`
  33: drop
  24: take
  21: pop
  19: tail
  15: !it
  13: arg/(Expr)
  5: ??
  4: lead
  1: ->
- Xs.head = *Xs
  Xs.tail = Xs++
  Xs.drop{N} = Xs+N
  Xs.take{N} = Xs%N
- a way to define a block, such that all methods inside of it belong to some class
  +point
  `+` A B = ...
  -point
- Consider using  `*` to access the head element: *Xs would be the same as Xs.head or Xs.0. Currently *Xs is unused. Xs.0 and Xs.head are used 180 times in Spell of Mastery. Stuff like  `Xs.(Ys.0)` could be rewritten to `Xs.*Ys`.
- `pop` is relatively inefficient, so should be replaced by pointer
- `done` and `pass` for `dup` and `map` macros, where these keyword will yield alternative value or skip value.
- recompile dependent modules only when exports list changes
- Proper file interface with catching, representing files as usual lists:
  file{Name}.utf8
  file{Name}.get{Offset Length}
  file{Name}.list
  file{Name}.Offset <= Byte
- types should allow keywords initing fields by default; rethink the whole keywords syntax; because lowercase letter type constructor already conflicts with lowercase letter in function calls. I.e. make keywords to be uppercase
- proper documentation for non-local return
- Array slicing (could be implemented through a{} calling different method when used with `:`). Currently SoM has 192:28 proportion of List.Index to List.(expr). Consider Python's approach
  a[start:end] # items start through end-1
  a[start:]    # items start through the rest of the array
  a[:end]      # items from the beginning through end-1
  a[:]         # a copy of the whole array
  a[start:end:step] # step through array (usable with any of the above)
  a[-1]    # last item in the array
  a[-2:]   # last two items in the array
  a[:-2]   # everything except the last two items
- optimize `ssa losure`, which is not required in most cases.
- More-efficient hash tables, because K.hash%Bs.size is known to be arithmetic expression
- `:` should work inside of `{}`
- "case C" and `when C` should require `:`, otherwise it is too confusing.
  Alternatively `and` and `or` should have usual binary op syntax, otherwise they are too confusing
- Move all these "static uint8_t b__16335[]" into separately loadable string table to speedup compilation
  That will also make it possible to localize the application, without recompiling it.
- fast arithmetics, when all arithmetic operands being checked for FIXNUM at call site
- inline insertion of C/C++-style code, interfacing with FFI, which in the end could be used to reimplement runtime.c
- a way to quickly set all object fields to 0
- a way to disable CHECK_NARGS for production code
- expand_match should not do is_list, when called fron lambda arglist matching, as it is known to be is_list
- messages like `couldnt match args list`, should be part of runtime, or maybe _core
- Interpreter. Especially useful when C compiler is unavailable for bootstrap and for scripting.
- SYMTA_DEBUG should be define by compiler, based on command line options; watch for already compiled dependencies. Everything should be recompiled from scratch, when such option changes.
  - missing meta info for some symbols:
  0000000064799369:unnamed:502,23,C:/Users/nikita/Documents/git/symta/src/compiler.s
  0000000065CC3EC2:hard_list.map:0,0,unknown
  0000000065CDA031:_.{}:0,0,unknown
  0000000064790C45:produce_ssa:502,23,C:/Users/nikita/Documents/git/symta/src/compiler.s
- api->method could probably be replaced with get_meta
- make method tables sparse to reduce memory overhead: instead of NTypes*NMethods table, cache most recent types->methods at the call place.
- when jumps goes over variable introduction, notify user
- array fields should provide special `!`, which uses init, instead of allocating new memory.
- list of all functions that use specific function
- unless export table changes, no recompilation of dependent files should be required
- a way to simply include other symta file directly, as part of macro facility. I.e. `include` should be macro
- better way to read items from byte arrays. Also consider bit arrays
- symbols starting with digit, like `4players`, should be printed with "``" quotes
- tab character in text breaks parser
- `when 123: 456;` gives parser error "bad call: () `.` 0", under parse_semicolon
- `when got!it Expr: process it` should work with if
- confusing and non uniform absence of  `:` in `when Condition | action`
- rename `leave` to `lift, that is shorter and better describes what is being done to value. We are lifting control and result value back to the caller.
- unknown variable at top level doesn't provide location, just "unknown:0,0: undefined variable `XYZ`"
- a way to declare argument type for fast field access and to avoid `Me=type` comments
- Source location in stack traces. So when a wrong method on `No` object gets called, we can get the location immediately.
- proper heap allocation, instead of enheap, allowing moving any type to heap.
- enheap related stuff should be part of runtime to maximize efficiency
- the `_.enheap` returns base type, instead of returning derived type object; provide a way to access complete object inside called method
- Dynamic malloc and free, when say "P = freeable: point X Y" allocates point inside of inside of user provided pool. There should be an easy way to move existing object into pool and from pool.
- proper I/O streams, so that output of underlying could be redirected or suppressed.
- Networking
- some potential problems with class inheritance, like no base class data fields: adding `items` field in widget leads to subtle error
- variables are exported by value, instead of by reference, so they cannot be modified
